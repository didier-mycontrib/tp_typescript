class Personne {
  private _age : number;

  constructor(public numero :number|undefined = undefined,
              public nom : string ="?"){
    this._age = 0;
  }

  public get age() : number { return this._age;}
  public set age(newAge: number)  {
    if(newAge>=0)
       this._age = newAge;
    //else console.log("age negatif interdit");
    else throw "age negatif invalide"
  }

  incrementerAge():void {
    this._age++;
  }
}

var p1 : Personne  = new Personne(1,"toto");
p1.age = 30; 
try{
p1.age = -50;
}
catch(e){
  console.log(e);
}
console.log("age de p1 :" + p1.age); //30
console.log("nom de p1 :" + p1.nom);
console.log("numero de p1 :" + p1.numero);
p1.incrementerAge()Â ;
console.log("nouvel age de p1 :" + p1.age); //31

class Employe extends Personne{
  constructor(numero : number =0,
              nom : string ="?",
              public salaire : number = 0){
          super(numero,nom);    
    }
}

var e1 = new Employe(1,"toto",2500);
e1.salaire=3000;
console.log("Empoye e1 :" + JSON.stringify(e1) + ' de type=' + typeof(e1));

//-------------- tests avec  instanceof
if( e1 instanceof Employe){
    console.log("e1 est de type Employe")
}
if( p1 instanceof Employe){
  console.log("p1 est de type employe")
}else{
  console.log("p1 n'est pas de type Employe")
}

//--------- age plutot que _age en JSON via Reflect.defineProperty / enumerable
let p2 = new Personne(2,"toto2");
p2.age=45;
console.log(p2.nom + ' ' + p2.age);
console.log(p2);
console.log(JSON.stringify(p2));

Reflect.defineProperty(p2, "_age", {value: p2.age ,
writable : true, enumerable : false, configurable : true});
Reflect.defineProperty(p2, "age", {value: p2.age ,
    writable : true, enumerable : true, configurable : true});
console.log(">>>>"+JSON.stringify(p2))




